package com.example.threads;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class NQueensThreads {

    public static void main(String[] args){
        int R=5;
        int C=5;
        NQueensThreads nQueensThreads=new NQueensThreads();
        ExecutorService threadpool=Executors.newFixedThreadPool(3);

        for(int r=0;r<R;r++){
            int finalR = r;
            threadpool.execute(()->nQueensThreads.placeNQueens(new int[R][C], finalR,0));

        }

        threadpool.shutdown();

    }

    private void placeNQueens(int[][] a, int r, int i) {
        if(printNQueens(a,0,r)==false)
            System.out.println("Solution doesn't exist");
        else {
            printSol(a);
            System.out.println();
        }
    }

    private synchronized static void printSol(int[][] a) {
        System.out.println(Thread.currentThread().getName());
        for(int r=0;r<a.length;r++) {
            for (int c = 0; c < a.length; c++)
                System.out.print(a[r][c]);
            System.out.println();
        }
    }

    private static boolean printNQueens(int[][] a,int c, int row) {
        if(a.length<=c) {
            return true;
        }

        for(int r=row;r<a.length;r++){
            if(isSafeToPlace(r,c,a)) {
                a[r][c] = 1;

                if(printNQueens(a, c + 1,0))
                    return true;

                a[r][c] = 0;
            }
        }
        return false;
    }

    private static boolean isSafeToPlace(int r, int c, int[][] a) {
        for(int i=0;i<c;i++){
            if(a[r][i]==1)
                return false;
        }

        for(int i=r,j=c; i>=0 && j>=0;i--,j--){
            if(a[i][j]==1)
                return false;
        }

        for(int i=r,j=c; i<a.length && j<a.length;i++,j++){
            if(a[i][j]==1)
                return false;
        }
        return true;
    }
}
